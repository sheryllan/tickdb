# ETI run

Serial processing: 2.9G  /storage/P2D/merged_pcaps/lcmfrs23/22_08_2014/ETI/A.pcap ---  c78a7defa1a03fac8df26beaec95ebe0, execution time: 502.067351
Parallel processing: 2.9G    /storage/P2D/merged_pcaps/lcmfrs23/22_08_2014/ETI/A.pcap ---  04c08c4b2c7b9183377d678341999151, execution time: 671.528384

# EMDI run
Parallel:  30G    /storage/P2D/merged_pcaps/lcmfrs23/22_08_2014/EMDI/A.pcap c49aa3cbd235db3596bf5b4e1d100542 Done. Execution took 10145.622619 seconds
Parallel:  29G    /storage/P2D/merged_pcaps/lcmfrs23/22_08_2014/EMDI/A.pcap 0bd4be18aaed4dbb1f97f3ea0af90c47 Done. Execution took 9879.544415 seconds

Serial:  31G    /storage/P2D/merged_pcaps/lcmfrs23/22_08_2014/EMDI/A.pcap	99db93f714887744a774911a08c1cf28  Done. Execution took 1458.460229 seconds
Serial:  31G    /storage/P2D/merged_pcaps/lcmfrs23/22_08_2014/EMDI/A.pcap 	99db93f714887744a774911a08c1cf28  Done. Execution took 1644.740728 seconds


Observations:

	* Running in parallel gives us different MD5sums each time. I suspect that the order in which you merge the packets does make a difference. Unfortunately this makes it
  	  an inherently serial process. As you have to do the merge in a particular order

	* Running in serial is faster. I suspect this is because we have a lot of RAM, which is faster than  having to constandly load files in and out. 


Conclusion:

	1) Keep the pcap batches single process. Multi-process based on a higher level, namely on the ETI/EMDI/A/B Split
	2) Once we get the datamole processing bit done, and the CSV's are being processed. Re-run the experiment, and see if files with different MD5 sums actually 
	   generate the same CSV output files. It could be that datamole cares not for the different order of packets when merged, because it works on
	   the timestamps within the packets themselves

